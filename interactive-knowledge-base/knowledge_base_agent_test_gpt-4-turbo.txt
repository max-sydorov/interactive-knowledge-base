Question: What is the Quick Loan Platform?
Answer: The Quick Loan Platform is an online platform designed to facilitate the application process for small business loans. It features a streamlined, web-based interface where users can fill out a multi-step loan application form. The platform utilizes a three-tier architecture, including a ReactJS frontend for user interaction, a Java Spring Boot backend for processing and decision-making, and a PostgreSQL database for data persistence. This setup allows for efficient handling of loan applications, from initial data input and validation to decisioning and status updates.
----------------------------------------------------------------------------------------------------
Question: How does the application process work?
Answer: The application process on the Quick Loan platform involves several steps:
1. **User Interaction:** The user fills out a multi-step form on the frontend, which is a ReactJS single-page application. This form captures all necessary details required for the loan application.
2. **Client-Side Validation:** As the user inputs data, the frontend performs client-side validation to ensure that the data meets certain criteria before it is sent to the backend.
3. **Data Submission:** Once the form is completed and validated, the frontend submits the data to the backend API.
4. **Server-Side Processing:** The backend, built with Java Spring Boot, receives the data and performs further validation. It then persists the data in a PostgreSQL database and executes the decisioning logic to determine the outcome of the loan application.
5. **Decision Storage:** The decision and the status of the application are stored in the PostgreSQL database.
6. **Status Updates:** The frontend periodically polls or queries the backend to retrieve updates on the status of the application, which is then displayed to the user.
----------------------------------------------------------------------------------------------------
Question: What tables do we have in the database?
Answer: The tables in the PostgreSQL database are:
1. `applicants`
2. `businesses`
3. `loan_applications`
----------------------------------------------------------------------------------------------------
Question: Can a business have multiple loan applications?
Answer: Yes, a business can have multiple loan applications in the system. The database schema allows for multiple entries in the `loan_applications` table to reference the same `business_id`, indicating that one business can apply for multiple loans.
----------------------------------------------------------------------------------------------------
Question: How to submit an application? Where to find the status of an application?
Answer: To submit a loan application on the Quick Loan Platform, you need to fill out the multi-step form available on the frontend, which is a ReactJS single-page application. Ensure all required fields are completed as the frontend will perform client-side validation. Once the form is filled out, the data is submitted to the backend API.

To find the status of your application, after submission, the frontend will poll or query the backend for updates. The application status, once processed by the backend, will be updated and stored in the PostgreSQL database, and you can view the status directly on the frontend interface where you submitted your application.
----------------------------------------------------------------------------------------------------
Question: Generate sql query to get application status by user email
Answer: To retrieve the application status by user email from the Quick Loan platform's database, you can use the following SQL query:

```sql
SELECT la.status
FROM loan_applications la
JOIN applicants a ON la.applicant_id = a.id
WHERE a.email = 'specified_email@example.com';
```

Replace `'specified_email@example.com'` with the actual email address for which you want to check the application status. This query will return the status of all loan applications associated with the given email address.
----------------------------------------------------------------------------------------------------
