Question: How to submit an application? Where to find the status of an application?
Answer: To submit a loan application, you need to send a POST request to the endpoint `/api/applications` with a JSON payload that includes the applicant's information, business details, and loan specifics. Ensure that all the details in the payload adhere to the validation rules specified in the `LoanApplicationDTO`.

To find the status of a submitted application, send a GET request to `/api/applications/{id}`, where `{id}` is the UUID of the application you want to check. This request will return the details of the loan application, including its current status. If the application with the specified UUID does not exist, the system will respond with a 404 Not Found status.
----------------------------------------------------------------------------------------------------
Question: Where do we persist application data?
Answer: Application data is persisted in a relational database.
----------------------------------------------------------------------------------------------------
Question: What APIs do we have? What are their payloads in json format?
Answer: The loan application service provides two main APIs:

1. **POST /api/applications** - This endpoint is used to submit a loan application. The JSON payload for this API is as follows:

```json
{
  "id": "uuid",
  "applicant": {
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@example.com",
    "phone": "1234567890",
    "ssn": "123456789",
    "streetAddress": "123 Elm St",
    "city": "Anytown",
    "state": "Anystate",
    "zipCode": "12345"
  },
  "business": {
    "name": "Doe Enterprises",
    "ein": "12-3456789",
    "streetAddress": "456 Oak St",
    "city": "Anytown",
    "state": "Anystate",
    "zipCode": "67890",
    "type": "LLC",
    "yearsInOperation": 5,
    "annualRevenue": 500000.00
  },
  "loanDetails": {
    "amount": 100000.00,
    "purpose": "Expansion"
  },
  "status": "PENDING",
  "submittedAt": "2023-12-01T12:00:00Z"
}
```

2. **GET /api/applications/{id}** - This endpoint is used to retrieve a specific loan application by its UUID. The response payload for this API is similar to the POST payload, representing the details of the loan application:

```json
{
  "id": "uuid",
  "applicant": {
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@example.com",
    "phone": "1234567890",
    "ssn": "123456789",
    "streetAddress": "123 Elm St",
    "city": "Anytown",
    "state": "Anystate",
    "zipCode": "12345"
  },
  "business": {
    "name": "Doe Enterprises",
    "ein": "12-3456789",
    "streetAddress": "456 Oak St",
    "city": "Anytown",
    "state": "Anystate",
    "zipCode": "67890",
    "type": "LLC",
    "yearsInOperation": 5,
    "annualRevenue": 500000.00
  },
  "loanDetails": {
    "amount": 100000.00,
    "purpose": "Expansion"
  },
  "status": "PENDING",
  "submittedAt": "2023-12-01T12:00:00Z"
}
```

These APIs facilitate the creation and retrieval of loan applications within the system.
----------------------------------------------------------------------------------------------------
Question: How does our application submission process work?
Answer: The application submission process in your system, primarily handled by the `ApplicationService` class, works through the following steps:

1. **Receiving Data**: The process starts when a `LoanApplicationDTO` object, which includes details about the applicant, business, and loan specifics, is received by the `submitApplication` method in the `ApplicationService`.

2. **Mapping DTO to Entity**: The data from the `LoanApplicationDTO` is then mapped to corresponding entity classes (`Applicant`, `Business`, and `LoanApplication`) using the `DtoMapperService`. This service is responsible for converting the data transfer objects (DTOs) into entities that are suitable for database persistence.

3. **Setting Up Loan Application**: A new `LoanApplication` entity is created and populated with the mapped `Applicant` and `Business` entities. It also includes details such as the loan amount, purpose, and the submission timestamp.

4. **Determining Loan Status**: The system evaluates certain conditions based on the business's annual revenue, years in operation, and the requested loan amount to determine the loan status. Depending on these criteria, the status can be set to `APPROVED`, `DECLINED`, or `NEEDS_REVIEW`.

5. **Saving to Database**: The `LoanApplication` entity, along with the associated `Applicant` and `Business` entities, is saved to the database. This operation is performed within a transaction to ensure atomicity, meaning either all changes are successfully committed, or none are in case of an error.

6. **Returning Response**: After the loan application is saved, the method returns a `SubmissionResponseDTO` containing the ID of the newly created loan application. This ID can be used by the client to reference the application in future operations.

7. **Handling Requests**: The entire process is triggered by a POST request to the `/api/applications` endpoint in the `ApplicationController`. This controller handles the web request, invokes the `submitApplication` method, and returns the appropriate HTTP response to the client.

This structured process ensures that the application submission is handled efficiently, with clear separation of concerns and robust transaction management.
----------------------------------------------------------------------------------------------------
Question: What application decline rules do we have?
Answer: The application decline rules for the loan application service are:

1. If the annual revenue of the business is less than $50,000.
2. If the business has been in operation for less than one year.

Applications that do not meet these criteria but fail to meet other specific approval criteria are marked for review or further consideration.
----------------------------------------------------------------------------------------------------
Question: What application fields do we ask?
Answer: The application fields requested for the loan application service are categorized into three main sections:

1. **Applicant Details:**
   - First Name
   - Last Name
   - Email
   - Phone (optional)
   - Social Security Number (SSN)
   - Street Address (optional)
   - City (optional)
   - State (optional)
   - Zip Code (optional)

2. **Business Details:**
   - Business Name
   - Employer Identification Number (EIN)
   - Street Address (optional)
   - City (optional)
   - State (optional)
   - Zip Code (optional)
   - Business Type (optional)
   - Years in Operation
   - Annual Revenue

3. **Loan Details:**
   - Loan Amount
   - Loan Purpose

These fields are collected during the loan application process to gather necessary information about the applicant, their business, and the specifics of the loan they are requesting.
----------------------------------------------------------------------------------------------------
Question: What are the main components of the loan application service?
Answer: The main components of the loan application service include:

1. **Entities**:
   - `Applicant`: Represents the individual applying for the loan.
   - `Business`: Represents the business associated with the loan application.
   - `LoanApplication`: Represents the loan application itself, including details like loan amount, purpose, and status.

2. **Repositories**:
   - `ApplicantRepository`: Manages database operations related to `Applicant` entities.
   - `BusinessRepository`: Manages database operations related to `Business` entities.
   - `LoanApplicationRepository`: Manages database operations related to `LoanApplication` entities, including a custom query to fetch loan applications with applicant and business details eagerly loaded.

3. **DTOs (Data Transfer Objects)**:
   - `ApplicantDTO`: Data structure used to transfer applicant data between processes.
   - `BusinessDTO`: Data structure used to transfer business data.
   - `LoanApplicationDTO`: Data structure for transferring loan application data, including nested `ApplicantDTO` and `BusinessDTO`.
   - `LoanDetailsDTO`: Contains details about the loan such as amount and purpose.
   - `SubmissionResponseDTO`: Used to return the ID of a submitted loan application.

4. **Services**:
   - `ApplicationService`: Contains business logic for handling loan applications, including methods to submit a new application and retrieve an existing application. It uses annotations to manage transactions.

5. **Controllers**:
   - `ApplicationController`: Handles HTTP requests related to loan applications. It provides endpoints for submitting a new loan application and retrieving an existing one.

6. **Spring Boot Application Class**:
   - `LoanApplicationServiceApplication`: The main class that runs the Spring Boot application.

7. **Additional Components**:
   - `DtoMapperService`: A service for converting between entities and DTOs, although its implementation details are not provided in the context.
   - Various configuration annotations such as `@Service`, `@RestController`, `@Transactional`, and `@SpringBootApplication` that help in defining the service structure and transaction management.

These components work together to provide a complete backend service for managing loan applications, including creating new applications, storing applicant and business information, and retrieving and managing existing applications.
----------------------------------------------------------------------------------------------------
Question: How is user data validated in the application?
Answer: User data in the loan application service is validated using annotations from the `jakarta.validation.constraints` package. These annotations are applied to the fields in the data transfer objects (DTOs) to enforce various constraints. Here's a summary of how different types of data are validated:

1. **NotBlank**: This annotation ensures that string fields such as `firstName`, `lastName`, `email`, and `businessName` are not null or empty. It is used in fields like `firstName` and `lastName` in the `ApplicantDTO`.

2. **Email**: The `email` field in `ApplicantDTO` is validated with the `@Email` annotation to ensure the input conforms to a valid email format.

3. **Size**: This annotation specifies the minimum and maximum number of characters for a field. For example, the `ssn` field in `ApplicantDTO` must be between 9 and 11 characters.

4. **NotNull**: This annotation ensures that certain fields, such as `yearsInOperation` and `annualRevenue` in `BusinessDTO`, are not null.

5. **Min** and **PositiveOrZero**: These annotations validate numerical values. The `yearsInOperation` field in `BusinessDTO` uses the `@Min` annotation to ensure the value is zero or positive. The `annualRevenue` field uses the `@PositiveOrZero` annotation to ensure it is also zero or positive.

6. **Positive**: The `amount` field in `LoanDetailsDTO` is validated with the `@Positive` annotation to ensure that the loan amount specified is greater than zero.

These validations are automatically triggered when the corresponding DTOs are used in controller methods, such as in the `submitApplication` method of `ApplicationController`, where the `@Valid` annotation is used to initiate these validations when a loan application is submitted. If any of the constraints are violated, the application responds with validation error messages, preventing the processing of invalid data.
----------------------------------------------------------------------------------------------------
