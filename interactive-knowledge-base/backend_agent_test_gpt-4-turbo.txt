Question: How to submit an application? Where to find the status of an application?
Answer: To submit a loan application, you need to send a POST request to the `/api/applications` endpoint with a JSON payload containing the details of the loan application. This payload should include the applicant's personal information, business details, and the specifics of the loan being requested. The data must be structured according to the `LoanApplicationDTO` format, which includes fields for the applicant (`ApplicantDTO`), business (`BusinessDTO`), and loan details (`LoanDetailsDTO`). Ensure that the data provided is valid as per the constraints defined in the DTO classes.

Once the application is submitted, the system will process it and return a `SubmissionResponseDTO` containing the UUID of the submitted application. This UUID can be used to track the application status.

To find the status of an application, you need to send a GET request to `/api/applications/{id}`, where `{id}` is the UUID of the application you want to check. This request will return a `LoanApplicationDTO` object that includes the status of the loan application among other details. The status will be one of the following values defined by the `LoanStatus` enum: `PENDING`, `APPROVED`, `DECLINED`, or `NEEDS_REVIEW`.
----------------------------------------------------------------------------------------------------
Question: Where do we persist application data?
Answer: Application data is persisted in a relational database using JPA (Java Persistence API) entities defined in the `com.loan.application.entity` package. These entities include `LoanApplication`, `Applicant`, and `Business`, each mapped to corresponding tables in the database (`loan_applications`, `applicants`, and `businesses`). The persistence operations are facilitated through Spring Data JPA repositories such as `LoanApplicationRepository`, `ApplicantRepository`, and `BusinessRepository`. These repositories provide an abstraction layer to handle CRUD operations and database interactions seamlessly.
----------------------------------------------------------------------------------------------------
Question: What APIs do we have? What are their payloads in json format?
Answer: The system provides two main API endpoints under the `/api/applications` base path:

1. **POST /api/applications**
   - **Purpose**: Submits a loan application.
   - **Request Payload** (JSON format):
     ```json
     {
       "id": "uuid-string",
       "applicant": {
         "firstName": "John",
         "lastName": "Doe",
         "email": "john.doe@example.com",
         "phone": "1234567890",
         "ssn": "123456789",
         "streetAddress": "1234 Main St",
         "city": "Anytown",
         "state": "Anystate",
         "zipCode": "12345"
       },
       "business": {
         "name": "Doe Enterprises",
         "ein": "12-3456789",
         "streetAddress": "1234 Business St",
         "city": "Businesstown",
         "state": "Businessstate",
         "zipCode": "67890",
         "type": "LLC",
         "yearsInOperation": 10,
         "annualRevenue": 500000.00
       },
       "loanDetails": {
         "amount": 100000.00,
         "purpose": "Expansion"
       },
       "status": "PENDING",
       "submittedAt": "2023-12-01T12:00:00Z"
     }
     ```
   - **Response Payload** (JSON format):
     ```json
     {
       "applicationId": "uuid-string"
     }
     ```

2. **GET /api/applications/{id}**
   - **Purpose**: Retrieves a specific loan application by its UUID.
   - **Request Parameter**: `id` (UUID of the loan application)
   - **Response Payload** (JSON format):
     ```json
     {
       "id": "uuid-string",
       "applicant": {
         "firstName": "John",
         "lastName": "Doe",
         "email": "john.doe@example.com",
         "phone": "1234567890",
         "ssn": "123456789",
         "streetAddress": "1234 Main St",
         "city": "Anytown",
         "state": "Anystate",
         "zipCode": "12345"
       },
       "business": {
         "name": "Doe Enterprises",
         "ein": "12-3456789",
         "streetAddress": "1234 Business St",
         "city": "Businesstown",
         "state": "Businessstate",
         "zipCode": "67890",
         "type": "LLC",
         "yearsInOperation": 10,
         "annualRevenue": 500000.00
       },
       "loanDetails": {
         "amount": 100000.00,
         "purpose": "Expansion"
       },
       "status": "PENDING",
       "submittedAt": "2023-12-01T12:00:00Z"
     }
     ```

These APIs facilitate the creation and retrieval of loan applications, handling data related to applicants, businesses, and loan specifics.
----------------------------------------------------------------------------------------------------
Question: How does our application submission process work?
Answer: The application submission process in your system involves several steps, primarily handled by the `ApplicationService` class. Here's a breakdown of the process:

1. **Receiving Data**: The process begins when a `LoanApplicationDTO` object, containing details about the applicant, business, and loan specifics, is received by the `submitApplication` method in the `ApplicationService`.

2. **Mapping DTO to Entity**: The data from the `LoanApplicationDTO` is mapped to the corresponding entity classes (`Applicant`, `Business`, and `LoanApplication`) using the `DtoMapperService`. This service converts the data transfer objects (DTOs) into entities that can be persisted in the database.

3. **Setting Up Loan Application**: A new `LoanApplication` entity is created and populated with the mapped `Applicant` and `Business` entities. It also includes details such as the loan amount, purpose, and the submission timestamp.

4. **Determining Loan Status**: The system then evaluates certain conditions based on the business's annual revenue, years in operation, and the requested loan amount to determine the loan status. This could result in statuses like `APPROVED`, `DECLINED`, or `NEEDS_REVIEW`.

5. **Persisting Data**: The `LoanApplication` entity, along with its associated `Applicant` and `Business` entities, are saved to the database. This is facilitated by the JPA's cascade persist settings, which automatically save the related entities.

6. **Generating Response**: After saving the entities, the system generates a `SubmissionResponseDTO` containing the ID of the newly created loan application. This ID can be used for future reference or queries.

7. **Returning Response**: Finally, the response is sent back to the client, indicating that the application has been successfully submitted and providing the application ID.

This entire process is wrapped in a transaction, ensuring that all database operations are completed successfully before committing the transaction. If any step fails, the transaction is rolled back to maintain data integrity.
----------------------------------------------------------------------------------------------------
Question: What application decline rules do we have?
Answer: The application decline rules are as follows:

1. If the annual revenue of the business is less than $50,000 or if the business has been in operation for less than one year, the loan application is declined.
2. Otherwise, further evaluation is required to determine if the application should be approved or needs review.
----------------------------------------------------------------------------------------------------
Question: What application fields do we ask?
Answer: The application fields requested include:

1. **Applicant Details:**
   - First Name
   - Last Name
   - Email
   - Phone (optional)
   - Social Security Number (SSN)
   - Street Address (optional)
   - City (optional)
   - State (optional)
   - Zip Code (optional)

2. **Business Details:**
   - Business Name
   - Employer Identification Number (EIN)
   - Street Address (optional)
   - City (optional)
   - State (optional)
   - Zip Code (optional)
   - Business Type (optional)
   - Years in Operation
   - Annual Revenue

3. **Loan Details:**
   - Loan Amount
   - Loan Purpose

These fields are part of the structured data collected through the `LoanApplicationDTO`, which includes nested `ApplicantDTO` and `BusinessDTO` for applicant and business information respectively.
----------------------------------------------------------------------------------------------------
Question: What are the main components of the loan application service?
Answer: The main components of the loan application service include:

1. **Entities**: These are Java classes annotated with JPA annotations to map to database tables. Key entities include:
   - `Applicant`
   - `Business`
   - `LoanApplication`

2. **Repositories**: Interfaces that extend `JpaRepository`, allowing for CRUD operations and database interaction. Notable repositories are:
   - `ApplicantRepository`
   - `BusinessRepository`
   - `LoanApplicationRepository`

3. **DTOs (Data Transfer Objects)**: These classes are used to transfer data between processes. Important DTOs in the service are:
   - `ApplicantDTO`
   - `BusinessDTO`
   - `LoanApplicationDTO`
   - `LoanDetailsDTO`
   - `SubmissionResponseDTO`

4. **Services**: These classes contain business logic and interact with the repositories. The primary service is:
   - `ApplicationService` - Handles the logic for submitting and retrieving loan applications.

5. **Controllers**: These are REST controllers that handle HTTP requests and responses. The main controller is:
   - `ApplicationController` - Manages endpoints for submitting a new loan application and retrieving an existing one.

6. **Spring Boot Application Class**: This class runs the Spring Boot application:
   - `LoanApplicationServiceApplication`

7. **Utility Classes**: Such as `DtoMapperService` (implied but not explicitly shown in the provided files), which likely handles the conversion between entities and DTOs.

These components work together to allow users to submit loan applications, which are then processed and stored in a database, and can be retrieved as needed. The service uses Spring Boot for its framework, leveraging annotations like `@Service`, `@RestController`, `@Transactional`, and `@SpringBootApplication` to define beans and their behavior.
----------------------------------------------------------------------------------------------------
Question: How is user data validated in the application?
Answer: User data in the application is validated through a combination of annotations and configurations in the Java classes that define the data transfer objects (DTOs) and entities. Here's a breakdown of how validation is implemented:

1. **DTO Validation:**
   - In the DTO classes, such as `ApplicantDTO`, `BusinessDTO`, and `LoanApplicationDTO`, validation annotations from the `jakarta.validation.constraints` package are used. These annotations include:
     - `@NotBlank` to ensure that certain string fields are not empty or null.
     - `@Email` to validate that the email field contains a valid email format.
     - `@Size` to check that fields like SSN have a specific length.
     - `@NotNull` to ensure that certain fields are not null.
     - `@PositiveOrZero` and `@Positive` to validate that numeric values are positive or zero.
     - `@Min` to ensure that a number meets a minimum value requirement.
   - These annotations are processed automatically when the methods in the controller receive HTTP requests, provided that the `@Valid` annotation is used on the method parameters that accept these DTOs.

2. **Entity Validation:**
   - In the entity classes, such as `Applicant`, `Business`, and `LoanApplication`, constraints are defined mainly through the `@Column` annotation which allows specifying characteristics like `nullable = false` and `unique = true`, ensuring data integrity at the database level.
   - The `@CreationTimestamp` annotation is used in entities to automatically set date and time values when records are created, ensuring that these fields are never null and are accurately timestamped.

3. **Controller-Level Handling:**
   - In the `ApplicationController`, the `@Valid` annotation is used in conjunction with method parameters to trigger the validation process of incoming data embedded in request bodies. If the validation fails, the framework automatically generates a response with the validation errors, preventing the controller methods from processing invalid data.

4. **Service Layer:**
   - The service layer, particularly in methods like `submitApplication` in `ApplicationService`, handles business logic validation which might not be directly enforceable through annotations. This includes complex rules based on multiple attributes of the business logic.

This comprehensive validation strategy ensures that data integrity and business rules are enforced both at the API entry points and at the database level, providing robustness and reliability in data handling within the application.
----------------------------------------------------------------------------------------------------
